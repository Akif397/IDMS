{"version":3,"sources":["ImageInput/image.jpg","ImageInput/ImageInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageInput","state","initialImage","Image","imageHandler","e","reader","FileReader","onload","readyState","setState","result","readAsDataURL","target","files","choosedImage","this","className","ref","imageElement","src","alt","id","type","accept","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,mC,+MCkD5BC,E,4MA3CXC,MAAQ,CACJC,aAAcC,K,EAGlBC,aAAe,SAACC,GACZ,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACa,IAAtBF,EAAOG,YACN,EAAKC,SAAS,CAACR,aAAcI,EAAOK,UAG5CL,EAAOM,cAAcP,EAAEQ,OAAOC,MAAM,IACX,KAAtBT,EAAEQ,OAAOC,MAAM,KACd,EAAKC,aAAeV,EAAEQ,OAAOC,MAAM,K,uDAejC,IACCZ,EAAgBc,KAAKf,MAArBC,aACP,OACI,yBAAKe,UAAU,kBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,gBACX,yBAAKC,IAAKF,KAAKG,aAAcC,IAAKlB,EAAcmB,IAAI,GAAGC,GAAG,QAAQL,UAAU,WAEhF,2BAAOM,KAAK,OAAOF,IAAI,kBAAkBG,OAAO,UAAUP,UAAU,cAAcQ,SAAUT,KAAKZ,gBAErG,yBAAKa,UAAU,iBAAf,oB,GAxCSS,IAAMC,WCWhBC,MAVf,WACE,OACE,yBAAKX,UAAU,OAEX,kBAAC,EAAD,QCEYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dca99ac4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.519315fe.jpg\";","import React from \"react\";\r\nimport \"./ImageInput.css\";\r\nimport Image from \"./image.jpg\";\r\n// import Cropper from \"cropperjs\";\r\n\r\nclass ImageInput extends React.Component {\r\n    // choosedImage = \"\";\r\n    state = {\r\n        initialImage: Image\r\n    }\r\n    // imageElement = React.createRef();\r\n    imageHandler = (e) =>{\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            if(reader.readyState === 2){\r\n                this.setState({initialImage: reader.result})\r\n            }\r\n        }\r\n        reader.readAsDataURL(e.target.files[0])\r\n        if(e.target.files[0] !== \"\"){\r\n            this.choosedImage = e.target.files[0];\r\n        }\r\n    }\r\n    // componentDidMount(){\r\n        // const cropper = new Cropper(this.imageElement.current, {\r\n        //     zoomable: false,\r\n        //     scalable: false,\r\n        //     aspectRatio: 0,\r\n        //     crop: () => {\r\n        //         const canvas = cropper.getCroppedCanvas();\r\n        //         this.setState\r\n        //     }\r\n        // });\r\n    // }\r\n\r\n    render() {\r\n        const {initialImage} = this.state\r\n        return (\r\n            <div className=\"page-container\">\r\n                <div className=\"image-container\">\r\n                    <div className=\"image-holder\">\r\n                        <img ref={this.imageElement} src={initialImage} alt=\"\" id=\"image\" className=\"image\"/>\r\n                    </div>\r\n                    <input type=\"file\" alt=\"Select an image\" accept=\"image/*\" className=\"image-input\" onChange={this.imageHandler} />\r\n                </div>\r\n                <div className=\"output-result\">Result here</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default ImageInput;","import React from 'react';\n// import ImageCropper from \"./components/imagecropper\";\n// import myImage from './image.jpg';\nimport ImageInput from \"./ImageInput/ImageInput\";\n// import Cropper from \"./Cropper/cropper\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        {/* <ImageCropper src={myImage}/> */}\n        <ImageInput />        \n        {/* <Cropper /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}